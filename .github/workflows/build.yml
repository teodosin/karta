name: Build Karta

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CI: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64

          # Intel runner for native x86_64 builds
          - os: macos-13
            target: x86_64-apple-darwin
            name: macos-x86_64

          # Apple Silicon runner for native arm64 builds
          - os: macos-15
            target: aarch64-apple-darwin
            name: macos-aarch64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev \
            librsvg2-dev patchelf

      - name: Install WiX (Windows, for MSI)
        if: matrix.os == 'windows-latest'
        run: choco install wixtoolset --version=3.14.1 -y

      # ----- macOS signing setup -----
      - name: Import Apple Developer Certificate (macOS)
        if: startsWith(matrix.os, 'macos-')
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}              # base64 of .p12 (must include private key)
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -eo pipefail

          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12

          KEYCHAIN="build.keychain"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"

          # Put our keychain first so codesign sees it
          security list-keychains -d user -s "$KEYCHAIN" "$HOME/Library/Keychains/login.keychain-db" || true
          security default-keychain -s "$KEYCHAIN" || true

          # Import .p12 and allow codesign / productbuild to use it non-interactively
          security import certificate.p12 -k "$KEYCHAIN" -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -A

          # Some environments need this partition list set explicitly
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN"

          echo "== Identities in build keychain =="
          security find-identity -v -p codesigning "$KEYCHAIN" || true

      - name: Resolve signing identity (macOS)
        if: startsWith(matrix.os, 'macos-')
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -eo pipefail
          KEYCHAIN="build.keychain"

          # Ensure keychain is unlocked & searchable (idempotent)
          security list-keychains -d user -s "$KEYCHAIN" "$HOME/Library/Keychains/login.keychain-db" || true
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN" || true

          # Prefer Developer ID Application (outside Mac App Store), then Apple Distribution, then Apple Development
          CERT_HASH=$(security find-identity -v -p codesigning "$KEYCHAIN" | awk '/Developer ID Application|Apple Distribution|Apple Development/ {print $2; exit}')

          if [ -z "$CERT_HASH" ]; then
            echo "::group::Keychain identities (debug)"
            security find-identity -v -p codesigning "$KEYCHAIN" || true
            echo "::endgroup::"
            echo "::error::No valid Apple signing identity found in $KEYCHAIN. Ensure APPLE_CERTIFICATE is a .p12 WITH private key and the password is correct."
            exit 1
          fi

          echo "Using signing identity hash: $CERT_HASH"
          echo "APPLE_SIGNING_IDENTITY=$CERT_HASH" >> "$GITHUB_ENV"

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            karta_svelte/src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install frontend dependencies
        working-directory: karta_svelte
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        working-directory: karta_svelte
        run: pnpm build

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0" --locked

      - name: Build Tauri app
        working-directory: karta_svelte
        env:
          # macOS signing & notarization (envs are harmless on other OS targets)
          APPLE_SIGNING_IDENTITY: ${{ env.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}     # app-specific password
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cargo tauri build --target ${{ matrix.target }}

      # ----- artifacts -----
      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: karta-${{ matrix.name }}
          path: |
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: karta-${{ matrix.name }}
          path: |
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

      - name: Upload artifacts (macOS)
        if: startsWith(matrix.os, 'macos-')
        uses: actions/upload-artifact@v4
        with:
          name: karta-${{ matrix.name }}
          path: |
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/**/*
          draft: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
