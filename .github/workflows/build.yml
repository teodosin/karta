name: Build Karta

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # Windows: keep MSI build; avoid failing if a newer WiX is preinstalled
      - name: Ensure WiX (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $candle = Get-Command candle.exe -ErrorAction SilentlyContinue
          if ($candle) {
            Write-Host "WiX already installed at $($candle.Source)"
          } else {
            choco upgrade wixtoolset -y --no-progress
          }

      # ---------- macOS signing setup ----------
      - name: Import Apple Developer Certificate (macOS)
        if: matrix.os == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}               # base64 of .p12 (with private key)
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -eo pipefail
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12

          KEYCHAIN="build.keychain"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security set-keychain-settings -t 3600 -u "$KEYCHAIN"

          # Import the .p12 and allow non-interactive codesign
          security import certificate.p12 -k "$KEYCHAIN" -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -A
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN"

          echo "== Identities in build keychain =="
          security find-identity -v -p codesigning "$KEYCHAIN" || true

      - name: Resolve signing identity (macOS)
        if: matrix.os == 'macos-latest'
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -eo pipefail
          KEYCHAIN="build.keychain"
          security list-keychains -d user -s "$KEYCHAIN" "$HOME/Library/Keychains/login.keychain-db" || true
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN" || true

          # Prefer Developer ID Application, then Apple Distribution, then Apple Development
          CERT_HASH=$(security find-identity -v -p codesigning "$KEYCHAIN" | awk '/Developer ID Application|Apple Distribution|Apple Development/ {print $2; exit}')
          if [ -z "$CERT_HASH" ]; then
            echo "::group::Keychain identities (debug)"
            security find-identity -v -p codesigning "$KEYCHAIN" || true
            echo "::endgroup::"
            echo "::error::No valid Apple signing identity found in $KEYCHAIN"
            exit 1
          fi
          echo "CERT_ID=$CERT_HASH" >> "$GITHUB_ENV"
          echo "Using signing identity hash: $CERT_HASH"

      # ---------- caches ----------
      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install frontend dependencies
        working-directory: karta_svelte
        run: pnpm install

      - name: Build frontend
        working-directory: karta_svelte
        run: pnpm build

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0"

      # ---------- NEW: notarization preflight (macOS) ----------
      - name: Notarization preflight (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}     # app-specific password
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PROVIDER_SHORT_NAME: ${{ secrets.APPLE_PROVIDER_SHORT_NAME }} # optional
        run: |
          set -euo pipefail
          # Mask values defensively
          [ -n "${APPLE_ID:-}" ] && echo "::add-mask::$APPLE_ID"
          [ -n "${APPLE_PASSWORD:-}" ] && echo "::add-mask::$APPLE_PASSWORD"
          [ -n "${APPLE_TEAM_ID:-}" ] && echo "::add-mask::$APPLE_TEAM_ID"
          [ -n "${APPLE_PROVIDER_SHORT_NAME:-}" ] && echo "::add-mask::$APPLE_PROVIDER_SHORT_NAME"

          # Presence checks (no values printed)
          [ -n "${APPLE_ID:-}" ] || { echo "::error::APPLE_ID is empty"; exit 1; }
          [ -n "${APPLE_PASSWORD:-}" ] || { echo "::error::APPLE_PASSWORD (app-specific) is empty"; exit 1; }
          [ -n "${APPLE_TEAM_ID:-}" ] || { echo "::error::APPLE_TEAM_ID is empty"; exit 1; }

          # Validate creds without uploading anything
          if ! xcrun notarytool history \
                --apple-id "$APPLE_ID" \
                --team-id "$APPLE_TEAM_ID" \
                --password "$APPLE_PASSWORD" >/dev/null 2>&1; then
            echo "::error::Notarization credentials invalid (APPLE_ID / APPLE_PASSWORD / APPLE_TEAM_ID)."
            echo "If your Apple ID belongs to multiple teams, set APPLE_PROVIDER_SHORT_NAME."
            exit 1
          fi
          echo "Notarization credentials look valid."

      - name: Build Tauri app
        working-directory: karta_svelte
        run: cargo tauri build --target ${{ matrix.target }}
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}     # app-specific password
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PROVIDER_SHORT_NAME: ${{ secrets.APPLE_PROVIDER_SHORT_NAME }} # optional

      # ---------- artifacts ----------
      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: karta-${{ matrix.name }}
          path: |
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: karta-${{ matrix.name }}
          path: |
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: karta-${{ matrix.name }}
          path: |
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app
            karta_svelte/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/**/*
          draft: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
